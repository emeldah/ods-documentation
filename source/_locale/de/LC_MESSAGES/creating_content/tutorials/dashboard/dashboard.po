#
msgid ""
msgstr ""
"Project-Id-Version: OpenDataSoft Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-10-29 17:52+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:2
msgid "Building a dynamic dashboard - step by step !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:4
msgid ""
"The aim of this tutorial is to create very easily a dashboard by using "
"widgets, AngularJS and CSS tools provided by OpenDataSoft platform."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:19
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:29
msgid "Basics"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:7
msgid "pick up a dataset"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:8
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:43
msgid "Create a page"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:9
msgid "add a map view"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:10
msgid "add a table view"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:11
msgid "add a chart"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:12
msgid "link them all together !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:13
msgid "add a text search form"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:14
msgid "add some filters"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:15
msgid "discover CSS classes for easy responsive development"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:16
msgid "have a deeper look to the \"context\""
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:17
msgid "add a record counter"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:18
msgid "add a download link"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:19
msgid "create some KPIs"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:26
msgid "Going further"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:25
msgid "AngularJS and advanced used of Widgets"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:22
msgid "discover angular JS directives"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:23
msgid "Play with them by creating dynamic view - ng-if"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:24
msgid "Colorize your KPI - ng-class"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:25
msgid "Refine-on-click widgets"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:32
msgid "Pick up a datasets"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:34
msgid ""
"This tutorial is based on the company registrations dataset in France (year "
"2016)."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:36
msgid "First you need to add this dataset on your domain:"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:38
msgid "entreprises-immatriculees-en-2016"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:40
msgid ""
"You can simply use the `Add a dataset from the OpenDataSoft network` button "
"when you add a new source of data in your dataset."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:45
msgid "Go to **Backoffice -> Pages -> New page**"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:46
msgid ""
"Enter a **page url** suffix, optionnaly a **Title** and **description**, "
"then **Save**"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:47
msgid ""
"Click on ``Edit in expert mode`` to directly have access to CSS/HTML code of"
" the page."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:50
msgid "You should now view this HTML code in your page :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:59
msgid ""
"From now, all the code will be added in the ``ods-box div``, like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:71
msgid "Save and open your page."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:73
msgid ""
"If you don't see the **Open page** button in the top right part of the "
"screen, refresh your page."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:75
msgid ""
"You can also go back to the **Pages** menu in the navigation bar, to see the"
" list of pages and click on the eye to go directly to it."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:79
msgid "Add a map view"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:81
msgid ""
"The simplest way to begin is to use share links and code bellow each data "
"visualisation."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:83
msgid ""
"Go to your dataset, go to the map tab, then, below your map, click on "
"``widget`` and simply copy and paste the code in the custom page."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:102
msgid ""
"Each block will be explained later, for the moment, just preview your page "
"by clicking on the **Preview** button on the center right part of your "
"browser."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:104
msgid ""
"We advise you to open your page in a new tab of your browser for a faster "
"loading (and refresh this tab any time you want to check see your new "
"version)."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:106
msgid ""
"It should looks like this (the map basemap should be different depending on "
"your domain settings) :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:112
msgid "Add a table view"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:114
msgid ""
"Now, still on the dataset explore screen, go to the table view (**Table** "
"tab), ``widget`` share link, and simply copy and paste the code below the "
"map."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:141
msgid ""
"Save, refresh, and see that the dashboard now have two data-vizualisation :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:146
msgid "Add a chart"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:148
msgid ""
"In the dataset again, go to the chart view, select an X axis and Y axis, get"
" the widget code, copy and paste."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:150
msgid ""
"An exemple of interesting chart for this documentation is to display the "
"number of company by region."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:152
msgid "X axis : ``RÃ©gion`` (administrative area) Y axis : ``count``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:157
msgid "Save, refresh, it should looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:199
msgid "Link them all together !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:201
msgid ""
"If we draw a circle, or polygon on the map, we can filter the list of "
"displayed items, we unfortunatly see that only the map reacts and the table "
"or chart just **ignores** our filter !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:203
msgid ""
"Most of the time, we want all widgets to be connected each others. To do "
"this, the secret is to use the same **context**. The **context** is the "
"pivot between each elements of your pages, all the widgets that should "
"interact together must use the same **context**."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:206
msgid ""
"On the other hand, it's also the link between your widgets and the "
"**dataset**, it's the way to define on witch dataset your widgets should "
"work (queries, filters and display records)"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:208
msgid ""
"Let's have a look to our code, each time we copied and pasted a bloc, we got"
" too main elements, an ``ods-dataset-context`` first, and a widget : ``ods-"
"map``, ``ods-table`` and ``ods-chart``."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:233
msgid ""
"This cleaned version of code highlight that the 3 widgets have, each time, "
"their own context ! 3 contexts, for 3 widgets."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:235
msgid ""
"A simple thing to do then is to keep only one, and move our widgets below "
"this **unique** context !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:237
msgid "Here is the result :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:268
msgid ""
"Now, any circle, rectangle or polygon drawn on the map will apply the a "
"filter on the **context**, **shared** by all widgets, we then expect that "
"the table and chart **dynamically reload** their display with the filtered "
"results."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:274
msgid "Add a text search form"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:276
msgid ""
"Now that we have an unique context to work on, and all our widgets are "
"linked together, we can add other advanced widget. Let's start with a search"
" bar !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:279
msgid ""
"Open a new tab with the full `widget documentation "
"<http://opendatasoft.github.io/ods-widgets/docs/#/api>`_ to see the list of "
"available widgets."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:281
msgid ""
"The search bar is called `odsTextSearch <http://opendatasoft.github.io/ods-"
"widgets/docs/#/api/ods-widgets.directive:odsTextSearch>`_. It has several "
"optionnal parameters and only one mandatory : the context !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:284
msgid "Let's keep it simple for the moment and use it like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:292
msgid "where"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:291
msgid "``mycontext`` is the name of my context in my custom page."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:294
msgid "Now, add a search bar at the top of the dashboard :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:327
msgid "Save, refresh, search !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:329
msgid "For exemple, search for 'sport club' in the south of France :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:335
msgid "Add some filters"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:337
msgid ""
"Like in the explore view, it's very interresting to have dataset filters to "
"narrow your search. Ods filters widget is called `ods-facets "
"<http://opendatasoft.github.io/ods-widgets/docs/#/api/ods-"
"widgets.directive:odsFacets>`_"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:340
msgid "The simplest way is to display all facets :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:346
msgid ""
"A smarter way is to pick only needed facets by specifying the field id (not "
"the name !) :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:358
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:404
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:559
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:715
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:751
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:858
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:954
msgid "Note"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:361
msgid ""
"To get the field id you need to be aware of the dataset schema. It's "
"available in the information tab of the dataset. The dataset schema shows "
"every information on each field : name, description, id, type, and a value "
"exemple. It's often convenient to know the type and the id of each field "
"when using advanced widget parameters."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:363
msgid ""
"In this dashboard exemple, we will use 2 filters : the company activity "
"sector, and the city ! Add this code near the search bar :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:394
msgid "It's now much simpler to search for sport club in Paris !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:400
msgid "Discover CSS classes for easy responsive development"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:402
msgid ""
"This dashboard starts to be nice but every widgets are in the same column, "
"one after another without any style tuning."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:407
msgid ""
"At this point you need to be aware of the platform possibilities about CSS "
"and HTML Style. Please read carrefully the :doc:`responsive grid layout "
"management "
"</customizing_look_and_feel/07_designing_responsive_portal/responsive>` "
"documentation."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:410
msgid ""
"We will split the screen into two main areas : on the left a navigation bar,"
" on the right the main content. The navigation bar will carry the search bar"
" and filters, the content will carry the table, map and chart."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:413
msgid "It will looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:417
msgid ""
"Bootsrap (the grid layout managment tool) split the page into 12 columns. We"
" will alloy 3 columns for the navigation bar and 9 for the content. We will "
"split the screen for devices starting from medium size. The CSS class is "
"``col-md-3`` and ``col-md-9``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:421
msgid ""
"Concerning the table and chart widget, we will split the area in two equal "
"size, ie. 6 columns each. The CSS class is ``col-md-6``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:423
msgid ""
"One last detail: to use ``col-xx-yy`` CSS classes, they always need to be "
"inside a ``row`` element ! So first, you define rows, then you split the "
"rows !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:429
msgid "The HTML block should then looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:475
msgid ""
"We now have a real dashboard, last detail will be to give some air of every "
"element, they are still all sticked together. It's a pure CSS aspect, and "
"using ``margin`` and ``padding`` rules will easilly do the job."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:478
msgid ""
"But the platform also provide a CSS class called ``ods-box``. It encapsulate"
" any element into a box with a thin rounded border. We will use it to "
"encapsulate the navigation bar, the map, the table and the chart."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:482
msgid "The full HTML code is now :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:550
msgid "Have a deeper look to the \"context\""
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:552
msgid ""
"We now know that the context is the key between all widgets and the link "
"between them and the data. Some widgets consume/read it : the odsTable "
"widget will use it to get records and display them. Some widgets act/modify "
"it : the odsTextSearch will query it by applying a search query or filter. "
"Some widgets do both : the odsFacets get filters, display them, and allow to"
" apply a filter on the context."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:557
msgid ""
"To go further it's now interresting to see how widget modify the context and"
" what kind of information we can get from it."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:564
msgid ""
"As OpenDataSoft widgets library rely on **AngularJS** we will use it's "
"syntax to read the **context**."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:563
msgid "The **context** is an **AngularJS variable**."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:564
msgid ""
"The **context** can be seen like a simple **JSON object**, with brackets, "
"key values lists etc..."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:565
msgid ""
"To evaluate an expression in AngularJS we use this syntax : ``{{ action1 or "
"variable1 }}``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:567
msgid ""
"To conclude this note, to read the context, simply add this bunch of code in"
" an empty space :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:586
msgid ""
"Save, refresh : you should see an ugly json at the top of your page, by "
"pretty printing it in your favorite dev. environment (or with an online json"
" pretty printer like the one from `CuriousConcept "
"<https://jsonformatter.curiousconcept.com/>`_ ) you should see something "
"like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:675
msgid ""
"As it's a json, we can with AngularJS expression navigate into it's "
"structure go get the value of any key. For exemple, to get the dataset "
"title, we go from the context, to the ``dataset`` list, then to the "
"``metas`` list, then we can reach the title value. Encapsulated in a big "
"header (h1 HTML tag), it looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:700
msgid ""
"Now that we saw what the context is, we must have a look to it's creation. "
"The `odsDatasetContext <http://opendatasoft.github.io/ods-widgets/docs/#/api"
"/ods-widgets.directive:odsDatasetContext>`_ is used to create a context, "
"based on a datasetid and, optionnaly other parameters."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:711
msgid ""
"As the documentation say, 2 parameters are mandatory : the context name, and"
" the datasetid. In our case, 1 additionnal parameter has been copied. "
"``mycontext-parameters`` is used to defined specific filters or query to the"
" context. Here, several disjunctive mode are set to true for 5 fields, and "
"the last parameter is a sort on date_d_immatriculation."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:718
msgid ""
"Disjunctive mode set to ``true`` on a facet field activate the multiple "
"choise filter mode. It allows the user to apply a filter, and still be able "
"to see and/or select  other values"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:720
msgid "We will remove this optional attribute and observe changes."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:729
msgid ""
"First the context, if we display it, the json parameters block is now much "
"smaller :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:731
msgid "In your code add :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:737
#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:828
msgid "Save, refresh, and see :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:745
msgid ""
"We still have a sort parameter, even if we deleted it from the context "
"creation widget (odsDatasetContext), it's due to the dataset sort setting in"
" the table view."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:747
msgid ""
"Last test : apply a filter on any facet and observe how the "
"``context.parameters`` object is updated."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:754
msgid ""
"Also observe the 'standard' behavior of facets : when a value is selected, "
"all others are hidden."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:758
msgid "Add a record counter and last processing date"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:760
msgid ""
"It's time to get more interresting pieces of information from this context :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:762
msgid "the total amount of records"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:763
msgid "the total number of hits matching the user query and/or filters"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:764
msgid "the last processing date of the dataset"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:786
msgid "Then :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:788
msgid ""
"the total amount of records will be accessible by : ``{{  "
"entreprisesimmatriculeesen2016.dataset.metas.records_count }}``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:789
msgid ""
"the total number of hits : ``{{  entreprisesimmatriculeesen2016.nhits }}``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:790
msgid ""
"the last processing date : ``{{  "
"entreprisesimmatriculeesen2016.dataset.metas.data_processed }}``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:792
msgid ""
"To finish, we include these blocs into our HTML code, surrounded by HTML and"
" CSS code to have a nice rendering."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:794
msgid ""
"Records and nhits on the top of the navigation bar, processing date at the "
"bottom :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:832
msgid ""
"It's nice but, the numerical and date format is a bit harsh. To fix that, we"
" will introduce a pure **AngularJS** concept called **filters**. `Full "
"documentation of AngularJS Filters here "
"<https://docs.angularjs.org/api/ng/filter>`_"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:835
msgid ""
"A filter is a function or operation that can be applied on a variable or "
"value in an AngularJS expression."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:837
msgid ""
"In our case, we will use the ``number`` filter to pretty print numerical "
"values (add a space or a comma every 3 digits depending on the country), and"
" a ``date`` to transform the ISO technical format into an human readable "
"format."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:861
msgid ""
"To \"call\" a filter, use pipe '|' at the end of the expression. Some "
"filters accept specific parameters, date filter accept a date format or "
"pattern. Example: ``expr. | date : 'M/d/yy'`` ``expr. | date : 'medium'``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:865
msgid "Save, refresh, see :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:871
msgid "Add a download link"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:873
msgid ""
"As the export tab of each datasets in OpenDataSoft platform, we can export "
"only filtered records, it's interresting to have a link or button to do the "
"same (for offline use of the data for exemple)."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:875
msgid ""
"The `odsDatasetContext <http://opendatasoft.github.io/ods-widgets/docs/#/api"
"/ods-widgets.directive:odsDatasetContext>`_ documentation describes some "
"function that can be directly called on the context. ``getdownloadURL`` "
"accepts 2 parameters, the first one is the format extension, the second one "
"the list of specific fields. In our case, we will add a button (a link with "
"a CSS class that gives any element a nice button style) to export records in"
" CSV format."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:885
msgid ""
"Save, refresh, test to apply some filters, then download the CSV export :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:891
msgid "Going further - AngularJS"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:894
msgid "Discover angular JS directives"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:896
msgid ""
"And `AngularJS directive <https://docs.angularjs.org/guide/directive>`_ can "
"be seen as an HTML attribute that can be added to any HTML elements. Lot's "
"of them are available in the platform and can be used to add dynamic "
"behavior to dashboards."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:899
msgid "Here is a subset of most used directives :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:901
msgid "``ng-init`` : initialise a variable"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:902
msgid ""
"``ng-click`` : evalute an expression when the user click on the element"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:903
msgid "``ng-class`` : apply a CSS class depending on a variable or condition"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:904
msgid "``ng-if`` : show or hide an element depending on a condition"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:905
msgid ""
"``ng-repeat`` : iterate over a list or an array, repeat the HTML element for"
" each iteration"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:906
msgid ""
"``ng-change`` : evalute an expression when the user change the value in an "
"HTML Select element"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:910
msgid "ng-if : Show or Hide a widget depending on the user filter choice"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:912
msgid ""
"In our dashboard we have the region line chart, and also the city filter ! "
"When the user select a city to filter on it, the chart become useless as it "
"only have one value to display."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:915
msgid ""
"What could be interesting is to hide the region widget when an activity is "
"selected, and show another chart instead !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:917
msgid ""
"Let's go back to the explore dataset view, go to the analyse tab, and set-up"
" a new chart, for exemple :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:921
msgid ""
"A pie chart with the number of recorded companies for each month of the "
"year, sorted."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:920
msgid "X axis : immatriculation date, month level"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:921
msgid "Y : pie chart, Y axis : count"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:923
msgid "Copy and paste the widget code below the chart."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:924
msgid "Remove the pasted context declaration"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:925
msgid "Change the context name used in this new chart (if needed)."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:927
msgid ""
"We can now use the ``ng-if`` directive on each widget to display one or the "
"other."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:929
msgid ""
"The condition will be, `if a refine is applied on the context`, show or "
"hide. We saw that the refine list is available in ``context.parameters``. As"
" parameters is a key value dictionnary, to get the ``myfield`` refine "
"parameter, we try to access : ``mycontext.parameters['refine.myfield']``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:932
msgid "Applied to our dataset it's looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:958
msgid ""
"The region chart ng-if condition can be translated to `Show the chart if "
"there is a refine on the **ville** facet`"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:958
msgid ""
"``!`` character is to get the opposite, the condition can be translated to "
"`Show the chart if their is NO refine on the **ville** facet`"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:959
msgid ""
"To easily understand how it works, do not hesitate to display the "
"``context.parameters`` value in your dashboard each time you use it !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:963
msgid "ng-if : display the download link only if the dashboard is filtered"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:965
msgid ""
"Same technique, if ``context.q`` or "
"``context.parameters['refine.myfilter']`` exists, show the download link."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:978
msgid "ng-init / ng-click / ng-if /ng-class : Create tabs to switch views"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:980
msgid "This exemple will use 4 differents directives."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:982
msgid "ng-init to declare a variable to keep track of witch tab to display !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:983
msgid ""
"ng-if to display only one tab at a time, depending on the value of the "
"variable"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:984
msgid ""
"ng-click to change de value of the variable to switch from a tab to another"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:985
msgid "ng-class to change the color of the tab to show witch tab is selected"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:987
msgid "So first, the HTML structure :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1017
msgid "Initialise a variable called ``tab`` with ``ng-init`` :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1023
msgid "On each tab button, add a ``ng-click`` to set the ``tab`` value :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1037
msgid "Then, on each content block, add a ``ng-if`` condition to display it :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1053
msgid ""
"Save, refresh, and test, you should now see that, by clicking on the tab "
"button, the content is changing !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1055
msgid ""
"Now, it needs some CSS to have a real button style, we already used it : "
"``ods-button ods-button--primary``. Let's also add a ``items`` and ``item`` "
"class."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1057
msgid "This looks like :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1073
msgid "Add in the CSS block this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1086
msgid ""
"Last thing, still with CSS, we want to highlight with a different color "
"witch tab is selected. We will use a predefined button also : ``ods-button--"
"danger`` (in red) This CSS class must be set only for a specific condition "
"with ``ng-class``. The pattern is : ``ng-class=\"{'css-class': variable == "
"value}\"``"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1090
msgid "The final HTML looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1121
msgid "Save, refresh, and try to switch tabs !"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1125
msgid ""
"Then we can include it in our dashboard to add extra dataviz without having "
"a too heavy dashboard (too heavy to load or to read). To give some space to "
"the table and the chart that are too small we will include them in a tab, we"
" will also add a third chart, based on another axis (the date for exemple). "
"The second row will become the tabulated row, and each widget (table, "
"charts) will be the content of each tab."
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1129
msgid "The main content looks like this :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1198
msgid "to center tab buttons, edit the CSS code with :"
msgstr ""

#: ../../source/creating_content/tutorials/dashboard/dashboard.rst:1211
msgid "And finally, save, refresh :"
msgstr ""
